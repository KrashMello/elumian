"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = exports.DataType = void 0;
const db_1 = require("../DB");
exports.DataType = {
    varchar: (length = 255) => {
        return `varchar(${length})`;
    },
    smallInt: 'SMALLINT',
    bigInt: 'BIGINT',
    text: 'TEXT',
    pk: 'PRIMARY KEY',
    increment: 'GENERATED BY DEFAULT AS IDENTITY',
    unique: 'UNIQUE',
    notNull: 'NOT NULL',
    boolean: 'BOOLEAN',
    bool: 'BOOL',
    timeStamp: 'TIMESTAMP',
    ref: (type, tables) => {
        const [schema, table, column] = tables.split('.');
        switch (type) {
            case '>':
                return `ALTER TABLE "<schemaRef>"."<tableRef>" ADD FOREIGN KEY ("<columnRef>") REFERENCES "${schema}"."${table}" ("${column}");`;
            case '<':
                return `ALTER TABLE "${schema}"."${table}"  ADD FOREIGN KEY ("${column}") REFERENCES "<schemaRef>"."<tableRef>" ("<columnRef>");`;
            case '-':
                return `ALTER TABLE "<schemaRef>"."<tableRef>" ADD FOREIGN KEY ("<columnRef>") REFERENCES "${schema}"."${table}" ("${column}");`;
            default:
                return '';
        }
    },
};
class Model {
    constructor() {
        this.schemaName = 'public';
        this.tableName = 'test';
        this.exclude = ['id', 'create_at', 'update_at'];
    }
    get excludeKeys() {
        return this.exclude;
    }
    set excludeKeys(values) {
        this.exclude = [...this.exclude, ...values];
    }
    init() {
        this.DB = new db_1.DB(this.schemaName, this.tableName);
    }
    async findAll() {
        const result = await this.DB.select().exec();
        return result.rows;
    }
    async count() {
        const result = await this.DB.select('count(*) as count').exec();
        return result.rows[0].count;
    }
}
exports.Model = Model;
