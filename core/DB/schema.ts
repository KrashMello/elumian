interface schemaTable {
  [key: string]: object
}

class Schema {
  constructor() {}
  public create(schema_name: string, tables: schemaTable) {
    let tableName: string[] = Object.keys(tables) as string[]
    let tablesName: string[] = Object.keys(tables) as string[]
    let valuesColumns: string[] = tablesName.map((key) => {
      return `CREATE TABLE IF NOT EXISTS "${schema_name}"."${key}" (
      ${Object.keys(tables[key])
        .map((columns) => {
          return `"${columns}" ${tables[key][columns]
            .toString()
            .replace(/,/g, ' ')}\\`
        })
        .toString()
        .replace(/,/g, '\n')}
      "created_at" timestamp default 'now()'\\
      "updated_at" timestamp default 'now()'
      );`
    })
    // FIX: last regex
    let query = `create schema if not EXISTS "${schema_name}";\n${valuesColumns
      .toString()
      .replace(/,/g, '\n')
      .replace(/(\\)|(,\s)/g, ',')
      .replace(/(\(\s{1})|(;\s{1})|('\s{1})/g, '')}`
    return query
  }
}

const options = {
  varchar: (length = 255) => {
    return `varchar(${length})`
  },
  smallInt: 'SMALLINT',
  bigInt: 'BIGINT',
  text: 'text',
  pk: 'PRIMARY KEY',
  increment: 'GENERATED BY DEFAULT AS IDENTITY',
  unique: 'UNIQUE',
  notNull: 'NOT NULL',
  boolean: 'boolean',
  bool: 'bool',
  timeStamp: 'timestamp',
}

export default {
  Schema,
  options,
}
