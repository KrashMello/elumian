import {
  type schemaTables,
  type options as optionsType,
  type retrunVarchar,
  type schemaUp,
  type schemaDown,
  type returnRef,
  type typeRef,
  type tablesRef,
  type columnsPropiety
} from './type'

const options: optionsType = {
  varchar: (length: number = 255): retrunVarchar => {
    return `varchar(${length})`
  },
  smallInt: 'SMALLINT',
  bigInt: 'BIGINT',
  text: 'TEXT',
  pk: 'PRIMARY KEY',
  increment: 'GENERATED BY DEFAULT AS IDENTITY',
  unique: 'UNIQUE',
  notNull: 'NOT NULL',
  boolean: 'BOOLEAN',
  bool: 'BOOL',
  timeStamp: 'TIMESTAMP',
  ref: (type: typeRef, tables: tablesRef): returnRef => {
    const [schema, table, column] = tables.split('.') as [
      string,
      string,
      string
    ]

    switch (type) {
      case '>':
        return `ALTER TABLE "<schemaRef>"."<tableRef>" ADD FOREIGN KEY ("<columnRef>") REFERENCES "${schema}"."${table}" ("${column}");`
      case '<':
        return `ALTER TABLE "${schema}"."${table}"  ADD FOREIGN KEY ("${column}") REFERENCES "<schemaRef>"."<tableRef>" ("<columnRef>");`
      case '-':
        return `ALTER TABLE "<schemaRef>"."<tableRef>" ADD FOREIGN KEY ("<columnRef>") REFERENCES "${schema}"."${table}" ("${column}");`
      default:
        return ''
    }
  }
}

class Schema {
  public create (schemaName: string, tables: schemaTables): schemaUp {
    const tablesName: string[] = Object.keys(tables)
    const ref: string[] = []
    const valuesColumns: string[] = tablesName.map((key) => {
      return `CREATE TABLE IF NOT EXISTS "${schemaName}"."${key}" (
      ${Object.keys(tables[key] as Record<string, columnsPropiety[]>)
        .map((columns) => {
          const table: Record<string, columnsPropiety[]> = tables[
            key
          ] as Record<string, columnsPropiety[]>
          let column: columnsPropiety[] = table[columns] as columnsPropiety[]

          if (column.filter((v) => v.includes('ALTER TABLE ')).length > 0) {
ref.push(
              column
                .filter((v) => v.includes('ALTER TABLE '))
                .map((v) => {
                  return v
                    .replace(/<schemaRef>/g, schemaName)
                    .replace(/<tableRef>/g, key)
                    .replace(/<columnRef>/g, columns)
                })
                .toString()
            )
}
          column = column.filter((v) => !v.includes('ALTER TABLE'))
          return `"${columns}" ${column.toString().replace(/,/g, ' ')}\\`
        })
        .toString()
        .replace(/,/g, '\n')}
      "created_at" timestamp default 'now()'\\
      "updated_at" timestamp default 'now()'
      );`
    })
    const query = {
      schema: `CREATE SCHEMA IF NOT EXISTS "${schemaName}";`,
      tables: `${valuesColumns
        .toString()
        .replace(/,/g, '')
        .replace(/(\\)|(,\s)/g, ',')}`.replace(/(\s{2,})/g, ''),
      ref: ref.toString().replace(/,/g, '')
    }
    return query
  }

  public drop (schemaName: string, tables: string[]): schemaDown {
    return {
      schema: `${
        schemaName !== 'public' ? 'DROP SCHEMA "' + schemaName + '"' : ''
      }`,
      tables: tables
        .map((tableName) => {
          return `DROP TABLE IF EXISTS "${schemaName}"."${tableName}" CASCADE;`
        })
        .toString()
        .replace(/,/g, '')
        .replace(/(\\)|(,\s)/g, ',')
    }
  }
}

export { Schema, options }
