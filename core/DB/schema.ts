import { schemaTables } from './types'
import { DB as db } from '@DB/index'

class Schema {
  private DB: any
  constructor() {
    this.DB = new db()
  }
  public create(schema_name: string, tables: schemaTables) {
    let tablesName: Array<string> = Object.keys(tables) as string[]
    let valuesColumns: Array<string> = tablesName.map((key) => {
      return `CREATE TABLE IF NOT EXISTS "${schema_name}"."${key}" (
      ${Object.keys(tables[key] as { [key: string]: Array<string> })
          .map((columns) => {
            let column: Array<string> = tables[key]![columns] as Array<string>
            return `"${columns}" ${column.toString().replace(/,/g, ' ')}\\`
          })
          .toString()
          .replace(/,/g, '\n')}
      "created_at" timestamp default 'now()'\\
      "updated_at" timestamp default 'now()'
      );`
    })
    let query = `create schema if not EXISTS "${schema_name}";
    ${valuesColumns
        .toString()
        .replace(/,/g, "")
        .replace(/(\\)|(,\s)/g, ",")}`.replace(/(\s{2,})/g, "");
    this.DB.queryExec(query)
  }
  public drop(schema_name: string, tables: Array<string>) {
    this.DB.queryExec(tables
      .map((tableName) => {
        return `DROP TABLE IF EXISTS "${schema_name}"."${tableName}" CASCADE;`;
      })
      .toString()
      .replace(/,/g, "")
      .replace(/(;\s{1,})/g, "x")
    )
  }
}

const options = {
  varchar: (length = 255) => {
    return `varchar(${length})`
  },
  smallInt: 'SMALLINT',
  bigInt: 'BIGINT',
  text: 'text',
  pk: 'PRIMARY KEY',
  increment: 'GENERATED BY DEFAULT AS IDENTITY',
  unique: 'UNIQUE',
  notNull: 'NOT NULL',
  boolean: 'boolean',
  bool: 'bool',
  timeStamp: 'timestamp',
}

export {
  Schema,
  options,
}
