type Diff<T, U> = T extends U ? never : T

type NotNullable<T> = Diff<T, null | undefined>

export type retrunVarchar = `varchar(${number})`

export type varchar = (v: number) => retrunVarchar

export interface options {
  varchar: varchar
  smallInt: 'SMALLINT'
  bigInt: 'BIGINT'
  text: 'TEXT'
  pk: 'PRIMARY KEY'
  increment: 'GENERATED BY DEFAULT AS IDENTITY'
  unique: 'UNIQUE'
  notNull: 'NOT NULL'
  boolean: 'BOOLEAN'
  bool: 'BOOL'
  timeStamp: 'TIMESTAMP'
}

export type columnsPropiety =
  | 'TIMESTAMP'
  | 'BOOL'
  | 'BOOLEAN'
  | 'NOT NULL'
  | 'UNIQUE'
  | 'GENERATED BY DEFAULT AS IDENTITY'
  | 'PRIMARY KEY'
  | 'BIGINT'
  | 'TEXT'
  | 'SMALLINT'
  | retrunVarchar

export interface schemaTables {
  [key: string]: {
    [key: string]: columnsPropiety[]
  }
}

export interface schemaUp {
  schema: string
  tables: string
  ref: string
}

export interface schemaDown {
  schema: string
  tables: string
}
export interface schemas {
  up: schemaUp
  down: schemaDown
}
